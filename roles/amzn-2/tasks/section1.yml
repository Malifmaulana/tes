- name: "SCORED | 1.1.1.1 | PATCH | Ensure mounting of cramfs filesystems is disabled"
  lineinfile:
      dest: /etc/modprobe.d/CIS.conf
      regexp: "^(#)?install cramfs(\\s|$)"
      line: "install cramfs /bin/true"
      create: yes
  when:
      - amzn2cis_rule_1_1_1_1|bool
  tags:
      - level1
      - scored
      - patch
      - rule_1.1.1.1
      - cramfs

- name: "SCORED | 1.1.1.1 | PATCH | Remove cramfs module"
  modprobe:
      name: cramfs
      state: absent
  when:
      - amzn2cis_rule_1_1_1_1|bool
      - ansible_connection != 'docker'
  tags:
      - level1
      - scored
      - patch
      - rule_1.1.1.1
      - cramfs

- name: "SCORED | 1.1.1.2 | PATCH | Ensure mounting of hfs filesystems is disabled"
  lineinfile:
      dest: /etc/modprobe.d/CIS.conf
      regexp: "^(#)?install hfs(\\s|$)"
      line: "install hfs /bin/true"
      create: yes
  when:
      - amzn2cis_rule_1_1_1_2|bool
  tags:
      - level1
      - scored
      - patch
      - rule_1.1.1.2
      - hfs

- name: "SCORED | 1.1.1.2 | PATCH | Remove hfs module"
  modprobe:
      name: hfs
      state: absent
  when:
      - amzn2cis_rule_1_1_1_2|bool
      - ansible_connection != 'docker'
  tags:
      - level1
      - scored
      - patch
      - rule_1.1.1.2
      - hfs


- name: "SCORED | 1.1.1.3 | PATCH | Ensure mounting of hfsplus filesystems is disabled"
  lineinfile:
      dest: /etc/modprobe.d/CIS.conf
      regexp: "^(#)?install hfsplus(\\s|$)"
      line: "install hfsplus /bin/true"
      create: yes
  when:
      - amzn2cis_rule_1_1_1_3|bool
  tags:
      - level1
      - scored
      - patch
      - rule_1.1.1.3
      - hfsplus

- name: "SCORED | 1.1.1.3 | PATCH | Remove hfsplus module"
  modprobe:
      name: hfsplus
      state: absent
  when:
      - amzn2cis_rule_1_1_1_3|bool
      - ansible_connection != 'docker'
  tags:
      - level1
      - scored
      - patch
      - rule_1.1.1.3
      - hfsplus

- name: "SCORED | 1.1.1.4 | PATCH | Ensure mounting of squashfs filesystems is disabled"
  lineinfile:
      dest: /etc/modprobe.d/CIS.conf
      regexp: "^(#)?install squashfs(\\s|$)"
      line: "install squashfs /bin/true"
      create: yes
  when:
      - amzn2cis_rule_1_1_1_4|bool
  tags:
      - level1
      - scored
      - patch
      - rule_1.1.1.4
      - squashfs

- name: "SCORED | 1.1.1.4 | PATCH | Remove squashfs module"
  modprobe:
      name: squashfs
      state: absent
  when:
      - amzn2cis_rule_1_1_1_4|bool
      - ansible_connection != 'docker'
  tags:
      - level1
      - scored
      - patch
      - rule_1.1.1.4
      - squashfs


- name: "SCORED | 1.1.1.5 | PATCH | Ensure mounting of udf filesystems is disabled"
  lineinfile:
      dest: /etc/modprobe.d/CIS.conf
      regexp: "^(#)?install udf(\\s|$)"
      line: "install udf /bin/true"
      create: yes
  when:
      - amzn2cis_rule_1_1_1_5|bool
  tags:
      - level1
      - scored
      - patch
      - rule_1.1.1.5
      - udf

- name: "SCORED | 1.1.1.5 | PATCH | Remove udf module"
  modprobe:
      name: udf
      state: absent
  when:
      - amzn2cis_rule_1_1_1_5|bool
      - ansible_connection != 'docker'
  tags:
      - level1
      - scored
      - patch
      - rule_1.1.1.5
      - udf

- name: "SCORED | 1.1.3 | PATCH | Ensure nodev option set on /tmp partition\n
         SCORED | 1.1.4 | PATCH | Ensure nosuid option set on /tmp partition\n
         SCORED | 1.1.5 | PATCH | Ensure noexec option set on /tmp partition\n
         | drop custom tmp.mount"
  copy:
      src: etc/systemd/system/tmp.mount
      dest: /etc/systemd/system/tmp.mount
      owner: root
      group: root
      mode: 0644
  notify: systemd restart tmp.mount
  when:
      - amzn2cis_rule_1_1_3|bool
      - amzn2cis_rule_1_1_4|bool
      - amzn2cis_rule_1_1_5|bool
  tags:
      - level1
      - scored
      - patch
      - rule_1.1.3
      - rule_1.1.4
      - rule_1.1.5

- name: "SCORED | 1.1.2 | PATCH | Ensure /tmp is configured | enable and start/restart tmp.mount"
  systemd:
      name: tmp.mount
      daemon_reload: yes
      enabled: yes
      masked: no
      state: started
  when:
      - amzn2cis_rule_1_1_2|bool
  tags:
      - level2
      - scored
      - patch
      - rule_1.1.2

- name: "SCORED | 1.1.6 | PATCH | Ensure separate partitions exist for /var"
  include: misc/partition.yml
  vars:
      amzn2cis_section: 1.1.6
      partition: "{{ amzn2cis_partition.var }}"
  when:
      - amzn2cis_rule_1_1_6|bool
      - amzn2cis_partition.var.mnt_path not in mounted_path_list.stdout_lines
  tags:
      - level2
      - scored
      - patch
      - rule_1.1.6
      - skip_ansible_lint

- name: "SCORED | 1.1.7 | PATCH | Ensure separate partitions exist for /var/tmp\n
         SCORED | 1.1.8 | PATCH | Ensure nodev option set on /var/tmp partition\n
         SCORED | 1.1.9 | PATCH | Ensure nosuid option set on /var/tmp partition\n
         SCORED | 1.1.10 | PATCH | Ensure noexec option set on /var/tmp partition"
  include: misc/partition.yml
  vars:
      amzn2cis_section: 1.1.7, 1.1.8, 1.1.9, 1.1.10
      partition: "{{ amzn2cis_partition.var_tmp }}"
  when:
      - amzn2cis_rule_1_1_7|bool
      - amzn2cis_rule_1_1_8|bool
      - amzn2cis_rule_1_1_9|bool
      - amzn2cis_rule_1_1_10|bool
      - amzn2cis_partition.var_tmp.mnt_path not in mounted_path_list.stdout_lines
  tags:
      - level2
      - scored
      - patch
      - rule_1.1.7
      - rule_1.1.8
      - rule_1.1.9
      - rule_1.1.10
      - skip_ansible_lint

- name: "SCORED | 1.1.11 | PATCH | Ensure separate partitions exist for /var/log"
  include: misc/partition.yml
  vars:
      amzn2cis_section: 1.1.11
      partition: "{{ amzn2cis_partition.var_log }}"
  when:
      - amzn2cis_rule_1_1_11|bool
      - amzn2cis_partition.var_log.mnt_path not in mounted_path_list.stdout_lines
  tags:
      - level2
      - scored
      - patch
      - rule_1.1.11
      - skip_ansible_lint

- name: "SCORED | 1.1.12 | PATCH | Ensure separate partitions exist for /var/log/audit"
  include: misc/partition.yml
  vars:
      amzn2cis_section: 1.1.12
      partition: "{{ amzn2cis_partition.var_log_audit }}"
  when:
      - amzn2cis_rule_1_1_12|bool
      - amzn2cis_partition.var_log_audit.mnt_path not in mounted_path_list.stdout_lines
  tags:
      - level2
      - scored
      - patch
      - rule_1.1.12
      - skip_ansible_lint

- name: "SCORED | 1.1.13 | PATCH | Ensure separate partitions exist for /home\n
         SCORED | 1.1.14 | PATCH | Ensure nodev option set on /home partition"
  include: misc/partition.yml
  vars:
      amzn2cis_section: 1.1.13, 1.1.14
      partition: "{{ amzn2cis_partition.home }}"
  when:
      - amzn2cis_rule_1_1_13|bool
      - amzn2cis_rule_1_1_14|bool
      - amzn2cis_partition.home.mnt_path not in mounted_path_list.stdout_lines
  tags:
      - level2
      - scored
      - patch
      - rule_1.1.13
      - rule_1.1.14
      - skip_ansible_lint

- name: "SCORED | ADDITIONAL | PATCH | Ensure separate partitions exist for /var/lib/etcd"
  include: misc/partition.yml
  vars:
      amzn2cis_section: ADDITIONAL
      partition: "{{ amzn2cis_partition.etcd }}"
  when:
      - amzn2cis_etcd_partition|bool
      - amzn2cis_partition.etcd.mnt_path not in mounted_path_list.stdout_lines
  tags:
      - level2
      - scored
      - patch
      - etcd_partiton
      - skip_ansible_lint

- name: "SCORED | ADDITIONAL | PATCH | Ensure separate partitions exist for /var/lib/docker"
  include: misc/partition.yml
  vars:
      amzn2cis_section: ADDITIONAL
      partition: "{{ amzn2cis_partition.docker }}"
  when:
      - amzn2cis_docker_partition|bool
      - amzn2cis_partition.docker.mnt_path not in mounted_path_list.stdout_lines
  tags:
      - level2
      - scored
      - patch
      - docker_partition
      - skip_ansible_lint


- name: "SCORED | 1.1.15 | PATCH | Ensure nodev option set on /dev/shm partition\n
         SCORED | 1.1.16 | PATCH | Ensure nosuid option set on /dev/shm partition\n
         SCORED | 1.1.17 | PATCH | Ensure noexec option set on /dev/shm partition"
  mount:
      name: /dev/shm
      src: tmpfs
      state: mounted
      fstype: tmpfs
      opts: "defaults,nodev,nosuid,noexec"
  when:
      - amzn2cis_rule_1_1_15|bool
      - amzn2cis_rule_1_1_16|bool
      - amzn2cis_rule_1_1_17|bool
  tags:
      - level1
      - scored
      - patch
      - rule_1.1.15
      - rule_1.1.16
      - rule_1.1.17

- name: "SCORED | 1.1.18 | PATCH | Ensure sticky bit is set on all world-writable directories"
  shell: set -o pipefail && df --local -P | awk {'if (NR!=1) print $6'} | xargs -I '{}' find '{}' -xdev -type d -perm -0002 2>/dev/null | xargs chmod a+t
  changed_when: no
  failed_when: no
  #when: sticky_bit_on_worldwritable_dirs_audit.rc == '0'
  when:
      - amzn2cis_rule_1_1_18|bool
  tags:
      - level1
      - scored
      - patch
      - rule_1.1.18

- name: "SCORED | 1.1.19 | PATCH | Disable Automounting"
  service:
      name: autofs
      enabled: no
  when:
      - not amzn2cis_allow_autofs
      - autofs_service_status.stdout == "loaded"
      - amzn2cis_rule_1_1_19|bool
  tags:
      - level1
      - patch
      - rule_1.1.19

- name: "NOTSCORED | 1.2.1 | PATCH | Ensure package manager repositories are configured"
  command: yum repolist
  args:
      warn: false
  register: yum_configured
  changed_when: no
  failed_when: no
  when:
      - amzn2cis_rule_1_2_1|bool
  tags:
      - level1
      - notscored
      - patch
      - rule_1.2.1
      - skip_ansible_lint

- name: "NOTSCORED | 1.2.2 | AUDIT | Ensure GPG keys are configured"
  command: rpm -q gpg-pubkey --qf '%{name}-%{version}-%{release} --> %{summary}\n'
  changed_when: no
  when:
      - amzn2cis_rule_1_2_2|bool
      - ansible_distribution == "RedHat"
  tags:
      - level1
      - notscored
      - patch
      - rule_1.2.2

- name: "SCORED | 1.2.3 | PATCH | Ensure gpgcheck is globally activated"
  replace:
      name: /etc/yum.conf
      regexp: "^gpgcheck=0"
      replace: "gpgcheck=1"
  when:
      - amzn2cis_rule_1_2_2|bool
  tags:
      - level1
      - scored
      - patch
      - rule_1.2.2

- name: "SCORED | 1.2.3 | PATCH | Ensure gpgcheck is globally activated "
  find:
      paths: /etc/yum.repos.d
      patterns: "*.repo"
  register: yum_repos
  changed_when: no
  when:
      - amzn2cis_rule_1_2_2|bool
  tags:
      - level1
      - scored
      - patch
      - rule_1.2.2

- name: "SCORED | 1.2.3 | PATCH | Ensure gpgcheck is globally activated"
  replace:
      name: "{{ item.path }}"
      regexp: "^gpgcheck=0"
      replace: "gpgcheck=1"
  with_items:
      - "{{ yum_repos.files }}"
  when:
      - amzn2cis_rule_1_2_2|bool
  tags:
      - level1
      - scored
      - patch
      - rule_1.2.2

- name: "SCORED | 1.3.1 | PATCH | Ensure AIDE is installed"
  yum:
      name: aide
      state: present
  when:
      - amzn2cis_rule_1_3_1|bool
  tags:
      - level1
      - scored
      - aide
      - patch
      - rule_1.3.1

- name: "SCORED | 1.3.1 | PATCH | Ensure AIDE is installed"
  command: /usr/sbin/aide --init -B 'database_out=file:/var/lib/aide/aide.db.gz'
  args:
      creates: /var/lib/aide/aide.db.gz
  changed_when: no
  failed_when: no
  async: 45
  poll: 0
  when:
      - amzn2cis_config_aide|bool
      - amzn2cis_rule_1_3_1|bool
      - not ansible_check_mode
  tags:
      - level1
      - scored
      - aide
      - patch
      - rule_1.3.1

- name: "SCORED | 1.3.2 | PATCH | Ensure filesystem integrity is regularly checked"
  cron:
      name: Run AIDE integrity check
      user: "{{ amzn2cis_aide_cron['cron_user'] }}"
      minute: "{{ amzn2cis_aide_cron['aide_minute'] | default('0') }}"
      hour: "{{ amzn2cis_aide_cron['aide_hour'] | default('5') }}"
      day: "{{ amzn2cis_aide_cron['aide_day'] | default('*') }}"
      month: "{{ amzn2cis_aide_cron['aide_month'] | default('*') }}"
      weekday: "{{ amzn2cis_aide_cron['aide_weekday'] | default('*') }}"
      job: "{{ amzn2cis_aide_cron['aide_job'] }}"
  when:
      - amzn2cis_rule_1_3_2|bool
  tags:
      - level1
      - scored
      - aide
      - file_integrity
      - patch
      - rule_1.3.2

- name: "SCORED | 1.4.1 | CHECK | Check stat /etc/grub2.cfg"
  stat:
      path: /etc/grub2.cfg
  register: grub_cfg
  when:
      - amzn2cis_rule_1_4_1|bool
  tags:
      - level1
      - scored
      - grub
      - patch
      - rule_1.4.1

- name: "SCORED | 1.4.1 | PATCH | Ensure permissions on bootloader config are configured"
  file:
      path: "{{ grub_cfg.stat.lnk_source }}"
      owner: root
      group: root
      mode: 0600
  when:
      - amzn2cis_rule_1_4_1|bool
      - grub_cfg.stat.exists and grub_cfg.stat.islnk
  tags:
      - level1
      - scored
      - grub
      - patch
      - rule_1.4.1

- name: "NOTSCORED | 1.4.2 | PATCH | Ensure authentication required for single user mode"
  block:
      - name: "NOTSCORED | 1.4.2 | PATCH | Ensure authentication required for single user mode - Emergency"
        lineinfile:
            dest: /usr/lib/systemd/system/emergency.service
            regexp: '/sbin/sulogin'
            line: 'ExecStart=-/bin/sh -c "/sbin/sulogin; /usr/bin/systemctl --fail --no-block default"'
        when:
            - amzn2cis_rule_1_4_2|bool
        tags:
            - level1
            - level2
            - patch
            - rule_1.4.2
      - name: "NOTSCORED | 1.4.2 | PATCH | Ensure authentication required for single user mode - Rescue"
        lineinfile:
            dest: /usr/lib/systemd/system/rescue.service
            regexp: '/sbin/sulogin'
            line: 'ExecStart=-/bin/sh -c "/sbin/sulogin; /usr/bin/systemctl --fail --no-block default"'
        when:
            - amzn2cis_rule_1_4_3|bool
        tags:
            - level1
            - level2
            - patch
            - rule_1.4.2

- name: "SCORED | 1.5.1 | PATCH | Ensure core dumps are restricted"
  lineinfile:
      state: present
      dest: /etc/security/limits.conf
      regexp: '^#?\\*.*core'
      line: '*                hard    core            0'
      insertbefore: '^# End of file'
  when:
      - amzn2cis_rule_1_5_1|bool
  tags:
      - level1
      - scored
      - limits
      - patch
      - rule_1.5.1

- name: "SCORED | 1.5.1 | PATCH | Ensure core dumps are restricted"
  sysctl:
      name: fs.suid_dumpable
      value: '0'
      state: present
      reload: yes
      sysctl_set: yes
      ignoreerrors: yes
  when:
      - amzn2cis_rule_1_5_1|bool
  tags:
      - level1
      - scored
      - sysctl
      - patch
      - rule_1.5.1

- name: "SCORED | 1.5.2 | PATCH | Ensure address space layout randomization (ASLR) is enabled"
  sysctl:
      name: kernel.randomize_va_space
      value: '2'
      state: present
      reload: yes
      sysctl_set: yes
      ignoreerrors: yes
  when:
      - amzn2cis_rule_1_5_2|bool
  tags:
      - level1
      - scored
      - patch
      - rule_1.5.2

- name: "SCORED | 1.5.3 | PATCH | Ensure prelink is disabled"
  command: prelink -ua
  when:
      - prelink_installed.rc == 0
      - amzn2cis_rule_1_5_3|bool
  tags:
      - level1
      - scored
      - patch
      - rule_1.5.3

- name: "SCORED | 1.5.3 | PATCH | Ensure prelink is disabled"
  yum:
      name: prelink
      state: absent
  when:
      - amzn2cis_rule_1_5_3|bool
  tags:
      - level1
      - scored
      - patch
      - rule_1.5.3

- name: "SCORED | 1.6.1.1 | PATCH | Ensure SELinux is not disabled in bootloader configuration"
  replace:
      dest: /etc/default/grub
      regexp: '(selinux|enforcing)\s*=\s*0\s*'
      follow: yes
  register: selinux_grub_patch
  ignore_errors: yes
  notify: generate new grub config
  when:
      - amzn2cis_rule_1_6_1_1|bool
  tags:
      - level2
      - scored
      - patch
      - rule_1.6.1.1

- name: "SCORED | 1.6.1.2 | PATCH | Ensure the SELinux state is enforcing"
  selinux:
      conf: /etc/selinux/config
      policy: "{{ amzn2cis_selinux_pol }}"
      state: "{{ amzn2cis_selinux_state }}"
  when:
      - not amzn2cis_selinux_disable|bool
      - amzn2cis_rule_1_6_1_2|bool
  tags:
      - level2
      - scored
      - selinux
      - patch
      - rule_1.6.1.2

- name: "SCORED | 1.6.1.3 | PATCH | Ensure SELinux policy is configured"
  selinux:
      conf: /etc/selinux/config
      policy: "{{ amzn2cis_selinux_pol }}"
      state: "{{ amzn2cis_selinux_state }}"
  when:
      - not amzn2cis_selinux_disable|bool
      - amzn2cis_rule_1_6_1_3|bool
  tags:
      - level2
      - scored
      - selinux
      - patch
      - rule_1.6.1.3

- name: "SCORED | 1.6.1.4 | PATCH | Ensure SETroubleshoot is not installed"
  yum:
      name: setroubleshoot
      state: absent
  when:
      - amzn2cis_rule_1_6_1_4|bool
  tags:
      - level2
      - scored
      - selinux
      - patch
      - rule_1.6.1.4

- name: "SCORED | 1.6.1.5 | PATCH | Ensure the MCS Translation Service (mcstrans) is not installed"
  yum:
      name: mcstrans
      state: absent
  when:
      - amzn2cis_rule_1_6_1_5|bool
  tags:
      - level2
      - scored
      - patch
      - rule_1.6.1.5

- name: "SCORED | 1.6.1.6 | PATCH | Ensure no unconfined daemons exist"
  shell: ps -eZ | egrep "initrc" | egrep -vw "tr|ps|egrep|bash|awk" | tr ':' ' ' | awk '{ print $NF }'
  when:
      - amzn2cis_rule_1_6_1_6|bool
  tags:
      - level2
      - scored
      - patch
      - rule_1.6.1.6

- name: "SCORED | 1.6.2 | PATCH | Ensure SELinux is installed"
  yum:
      name: libselinux
      state: present
  when:
      - amzn2cis_rule_1_6_2|bool
  tags:
      - level2
      - scored
      - patch
      - rule_1.6.2

- name: "SCORED | 1.7.1.1 | PATCH | Ensure message of the day is configured properly"
  template:
      src: etc/motd.j2
      dest: /etc/motd
  when:
      - amzn2cis_rule_1_7_1_1|bool
  tags:
      - level1
      - banner
      - patch
      - rule_1.7.1.1

- name: "NOTSCORED | 1.7.1.2 | PATCH | Ensure local login warning banner is configured properly"
  template:
      src: etc/issue.j2
      dest: /etc/issue
  when:
      - amzn2cis_rule_1_7_1_2|bool
  tags:
      - level1
      - patch
      - rule_1.7.1.2

- name: "NOTSCORED | 1.7.1.3 | PATCH | Ensure remote login warning banner is configured properly"
  template:
      src: etc/issue.net.j2
      dest: /etc/issue.net
  when:
      - amzn2cis_rule_1_7_1_3|bool
  tags:
      - level1
      - banner
      - patch
      - rule_1.7.1.3

- name: "NOTSCORED | 1.7.1.4 | PATCH | Ensure permissions on /etc/motd are configured"
  file:
      dest: /etc/motd
      state: file
      owner: root
      group: root
      mode: 0644
  when:
      - amzn2cis_rule_1_7_1_4|bool
  tags:
      - level1
      - perms
      - patch
      - rule_1.7.1.4

- name: "SCORED | 1.7.1.5 | PATCH | Ensure permissions on /etc/issue are configured"
  file:
      dest: /etc/issue
      state: file
      owner: root
      group: root
      mode: 0644
  when:
      - amzn2cis_rule_1_7_1_5|bool
  tags:
      - level1
      - perms
      - patch
      - rule_1.7.1.5

- name: "NOTSCORED | 1.7.1.6 | PATCH | Ensure permissions on /etc/issue.net are configured"
  file:
      dest: /etc/issue.net
      state: file
      owner: root
      group: root
      mode: 0644
  when:
      - amzn2cis_rule_1_7_1_6|bool
  tags:
      - level1
      - perms
      - patch
      - rule_1.7.1.6

- name: "NOTSCORED | 1.8 | PATCH | Ensure updates, patches, and additional security software are installed"
  yum:
      name: "*"
      state: latest
  when:
      - amzn2cis_rule_1_8|bool
  tags:
      - level1
      - level2
      - patch
      - rule_1.8
      - skip_ansible_lint